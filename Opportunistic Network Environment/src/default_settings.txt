## Default settings for the simulation### Scenario settingsScenario.name = default_scenarioScenario.simulateConnections = trueScenario.updateInterval = 0.1# 43200s == 12h# 36000s = 10h# 10800s = 3hScenario.endTime = 36000## Interface-specific settings:# type : which interface class the interface belongs to# For different types, the sub-parameters are interface-specific# For SimpleBroadcastInterface, the parameters are:# transmitSpeed : transmit speed of the interface (bytes per second) # transmitRange : range of the interface (meters)# "Bluetooth" interface for all nodesbtInterface.type = SimpleBroadcastInterface# Transmit speed of 2 Mbps = 250kBpsbtInterface.transmitSpeed = 250kbtInterface.transmitRange = 100# Define group of nodesScenario.nrofHostGroups = 1## Group-specific settings:# groupID : Group's identifier. Used as the prefix of host names# nrofHosts: number of hosts in the group# movementModel: movement model of the hosts (valid class name from movement package)# waitTime: minimum and maximum wait times (seconds) after reaching destination# speed: minimum and maximum speeds (m/s) when moving on a path# bufferSize: size of the message buffer (bytes)# router: router used to route messages (valid class name from routing package)# activeTimes: Time intervals when the nodes in the group are active (start1, end1, start2, end2, ...)# msgTtl : TTL (minutes) of the messages created by this host group, default=infinite## Group and movement model specific settings# pois: Points Of Interest indexes and probabilities (poiIndex1, poiProb1, poiIndex2, poiProb2, ... )#       for ShortestPathMapBasedMovement# okMaps : which map nodes are OK for the group (map file indexes), default=all #          for all MapBasedMovent models# routeFile: route's file path - for MapRouteMovement# routeType: route's type - for MapRouteMovement# Common settings for all groupsGroup.movementModel = ExternalMovementGroup.router = SSIPGroup.bufferSize = 5MGroup.waitTime = 0, 120# All nodes have the bluetooth interfaceGroup.nrofInterfaces = 1Group.interface1 = btInterface# Walking speedsGroup.speed = 0.5, 1.5# Message TTL of 300 minutes (5 hours)Group.msgTtl = 10SSIP.commPath = [traces/comm.txt]SSIP.ssimPath = [traces/ssim.txt]SSIP.crsPath = [traces/crs.txt]Group.nrofHosts = 169# group1 (pedestrians) specific settingsGroup1.groupID = p## Message creation parameters # How many event generatorsEvents.nrof = 1# Class of the first event generatorEvents1.class = MessageEventGenerator# (following settings are specific for the MessageEventGenerator class)# Creation interval in seconds (one new message every 25 to 35 seconds)Events1.interval = 2,5# Message sizes (500kB - 1MB)Events1.size = 500k,1M# range of message source/destination addressesEvents1.hosts = 0,125# Message ID prefixEvents1.prefix = M## Movement model settingsExternalMovement.file = [traces/geolife.txt]# World's size for Movement Models without implicit size (width, height; meters)MovementModel.worldSize = 4400, 6685# How long time to move hosts in the world before real simulationMovementModel.warmup = 10## Reports - all report names have to be valid report classes# how many reports to loadReport.nrofReports = 1# length of the warm up period (simulated seconds)Report.warmup = 30# default directory of reports (can be overridden per Report with output setting)Report.reportDir = reports/# Report classes to loadReport.report1 = MessageStatsReport## Optimization settings -- these affect the speed of the simulation## see World class for details.Optimization.cellSizeMult = 5Optimization.randomizeUpdateOrder = true## GUI settings# GUI underlay image settingsGUI.UnderlayImage.fileName = data/helsinki_underlay.png# Image offset in pixels (x, y)GUI.UnderlayImage.offset = 64, 20# Scaling factor for the imageGUI.UnderlayImage.scale = 4.75# Image rotation (radians)GUI.UnderlayImage.rotate = -0.015# how many events to show in the log panel (default = 30)GUI.EventLogPanel.nrofEvents = 100# Regular Expression log filter (see Pattern-class from the Java API for RE-matching details)#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$